=== jsonobj ===

Small Go package designed for manipulating/handling JSON data generically.

Creating typeless JSON marshallable object:

 NewObj()		//Returns a new empty object, marshals to JS `null'
 NewObj().SetInt(123)	//Returns a new object of integer (long) type with value 123.
 NewObj(123)		//Alternatively we can infer the type `int' like this
 NewObj().SetFloat(1.234)
 NewObj(1.234)		//Return a new object of float type (double) with value 1.234.
 NewObj("Hello world.") //Return a new object of string type with value "Hello world."
 NewObj(1, 2.1, 3, "4")	//Return a new object of type array, each element of the array has it's type infered. (int, float, int, string respectively)
 NewObj().SetArray(nil) //Return a new object of type array, and set it to a new slice of size 0. If param is not nil, set it to that array.
 NewObj().MakeArray()   //Slightly different to SetArray(); Return a new object of type array and a pointer to a slice of objects that is 0 sized. Usefull like this:
			// obj, array := NewObj().MakeArray()
			// *array = append(*array, NewObj(123))
			// //This creates JSON like: `[ 123 ]'
 NewObj().MakeArray(NewObj(1), NewObj(2.123), NewObj("string") ) //Alternatively we can specify any number of initial items in the array, this is the same as NewObj(1, 2.123, "string) except it needs *JSONObj values and also returns a pointer to the slice.
					//These can be nested infinately:
					// NewObj(123, 545, 654, NewObj("one", "two", "three"))
					//is valid. (Remember if NewObj() only has 1 value, it is not set to type array, use NewObj().MakeArray(NewObj(1)) for single element array creation.)
 NewObj().MakeMap()	//Create a new object of type map and returns the new object, and the map. 
 NewObj().SetMap(map)	//Create a new object of type map and set it to the value `map', or `nil' for new map. Returns the object.

Creatimg maps with NewObj():

The functions Table() and KV() are used for this:

NewObj(Table(KV("key", "value"), KV("key2", 123), KV("key3", 0.023))) creates a map like:
{key:"value", key2: 123, key3: 0.023}

To create array values with KV():

NewObj(Table(KV("array", 1, 2, 3, 4.03, "five")))

To create nested maps with Table():

NewObj(Table(KV("object", Table(KV("name", "value")))))

These can be combined in NewObj() like any other type:

NewObj(1, 2, "three", Table(KV("key", "value", 1.234)))

Accessors: 
 *JSONObj.Type()	//Return type of the object. See source for possible types.
 *JSONObj.Value()	//Return value as interface{}
 *JSONObj.Get*()	//Return value as specific type and ok bool to check if type was correct

Type casing:
 *JSONObj.TypeCaseFixed()	//A series of functions, or nil, that are executed if the object is of that type. See source for argument order. A special function `TCaseElse' can be specified if all others fail.
 *JSONObj.TypeCase(...)		//Like TypeCaseFixed() except the programmer provides which types map to which functions and if there is a TCaseElse it is appeneded to the end with no type specifier

TypeCase example:
 obj.TypeCase(JSONInt, func(val int64) {
	//Type it int
 }, JSONString, func(val string) {
	//Type is string
 }, func(*JSONObj) {
	//Type is neither
 })

It's worth noting that while TypeCase prefers int64 and float64 taking functions for JSONInt and JSONFloat types, she can also take int and float32 taking functions as well for those types.

Both type casing functions return true if a handler was called (including TCaseElse) or false if not or there was an error.

--- Marshalling ---

*JSONObj.String() marshals the object to JSON string.
*JSONObj.From(string) unmarshals the object and returns error if there was one.

obj, err := NewObj().From(str) //Try to parse from string `str' into new object `obj'

